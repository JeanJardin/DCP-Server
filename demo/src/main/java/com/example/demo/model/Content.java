package com.example.demo.model;

import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.data.annotation.Id;
import org.springframework.data.annotation.Transient;
import org.springframework.data.mongodb.core.mapping.Document;
import org.springframework.data.mongodb.core.mapping.Field;

/**
 * Represents a content object that can be persisted and retrieved.
 * Implements the IContent interface.
 */
@Document("Content")
public class Content implements IContent {
    /**
     * The unique autogenerated ID of the content object.
     */
    @Id
    private String contentID;
    /**
     * The Airtable ID associated with the content object.
     * Can be persisted.
     */
    @Field
    private String airtableID;
    /**
     * The hash of the json object.
     * Can be persisted.
     */
    @Field
    private String jsonHash;
    /**
     * The hash of binary data of the content.
     * Can be persisted.
     */
    @Field
    private String binaryHash;
    /**
     * The content JSON associated with the content object.
     * Not persisted.
     */
    @Transient
    private JSONObject contentJson;


    public Content() {

    }

    /**
     * Constructs a new Content object with the specified content hash, content JSON, and binary content.
     *
     * @param contentHash   The content hash of the Content object.
     * @param contentJson   The content JSON of the Content object.
     * @param binaryContent The binary content of the Content object.
     */
    public Content(String contentHash, JSONObject contentJson, byte[] binaryContent) {
        this.jsonHash = contentHash;
        this.contentJson = contentJson;
    }

    /**
     * Converts a JSON string into a Content object.
     *
     * @param json The JSON string to convert.
     * @return The Content object created from the JSON string.
     * @throws JSONException If there was an error parsing the JSON string.
     */
    public static Content fromJson(String json) throws JSONException {
        JSONObject obj = null;
        try {
            obj = new JSONObject(json);
        } catch (JSONException e) {
            throw new RuntimeException(e);
        }
        //
        String contentHash = null;
        try {
            contentHash = obj.getString("contentHash");
        } catch (JSONException e) {
            throw new RuntimeException(e);
        }
        JSONObject contentJson = obj.getJSONObject("contentJson");
        byte[] binaryContent = new byte[0];
        Content content = new Content(contentHash, contentJson, binaryContent);
        String contentID = obj.optString("contentID");
        if (!contentID.isEmpty()) {
            content.setContentID(contentID);
        }
        String airtableID = obj.optString("airtableID");
        if (!airtableID.isEmpty()) {
            content.setAirtableID(airtableID);
        }
        return content;
    }

    public String getContentID() {
        return contentID;
    }

    public void setContentID(String contentID) {
        this.contentID = contentID;
    }

    public String getAirtableID() {
        return airtableID;
    }

    public void setAirtableID(String airtableID) {
        this.airtableID = airtableID;
    }

    public String getJsonHash() {
        return jsonHash;
    }

    public void setJsonHash(String jsonHash) {
        this.jsonHash = jsonHash;
    }

    public String getBinaryHash() {
        return binaryHash;
    }

    public void setBinaryHash(String binaryHash) {
        this.binaryHash = binaryHash;
    }

    public JSONObject getContentJson() {
        return contentJson;
    }

    public void setContentJson(JSONObject contentJson) {
        this.contentJson = contentJson;
    }
}
